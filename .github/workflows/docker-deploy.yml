name: 🚀 Build and Deploy Tour Management App

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  IMAGE_NAME: tour-management-app
  REGISTRY: docker.io

jobs:
  # Test the application structure
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate application files
      run: |
        echo "🔍 Validating Tour Management application structure..."
        
        # Check for required files
        required_files=(
          "DotNetFrameworkProject_CE040_CE087/Tour_Management/DisplayTours.aspx"
          "DotNetFrameworkProject_CE040_CE087/Tour_Management/Web.config"
          "DotNetFrameworkProject_CE040_CE087/Tour_Management/Tour_Management.csproj"
          "Dockerfile"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        # Check Dockerfile
        if grep -q "FROM" Dockerfile; then
          echo "✅ Dockerfile is valid"
        else
          echo "❌ Dockerfile is invalid"
          exit 1
        fi
        
        echo "🎉 All validation checks passed!"

  # Build and deploy to Docker Hub
  build-and-deploy:
    name: 🐳 Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=v{{date 'YYYYMMDD-HHmmss'}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Test deployed image
      run: |
        echo "🧪 Testing deployed image..."
        docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        docker run --rm -d --name test-deployment -p 8082:80 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        
        # Wait for container to start
        sleep 15
        
        # Test if the application is responding
        if curl -f http://localhost:8082 > /dev/null 2>&1; then
          echo "✅ Deployed application is working correctly!"
        else
          echo "❌ Deployed application is not responding"
          docker logs test-deployment
          exit 1
        fi
        
        # Clean up test container
        docker stop test-deployment
        
    - name: 🎉 Deployment Summary
      run: |
        echo "🚀 Deployment completed successfully!"
        echo ""
        echo "📦 Image Details:"
        echo "  Name: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
        echo "  Tags: ${{ steps.meta.outputs.tags }}"
        echo ""
        echo "🔗 Links:"
        echo "  Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
        echo "  Latest Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo ""
        echo "🌐 Usage Commands:"
        echo "  Pull: docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "  Run:  docker run -d -p 8080:80 --name tour-management ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "  URL:  http://localhost:8080"
        echo ""
        echo "✨ Your Tour Management application is now live on Docker Hub!"

  # Build only (for PRs and other branches)
  build-only:
    name: 🏗️ Build Only
    runs-on: ubuntu-latest
    needs: test
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test built image
      run: |
        echo "🧪 Testing built image..."
        docker run --rm -d --name test-build -p 8083:80 ${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test if the application is responding
        if curl -f http://localhost:8083 > /dev/null 2>&1; then
          echo "✅ Built image is working correctly!"
        else
          echo "❌ Built image is not responding"
          docker logs test-build
          exit 1
        fi
        
        # Clean up test container
        docker stop test-build
        
    - name: Build Summary
      run: |
        echo "🏗️ Build completed successfully!"
        echo "📦 Image: ${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "✅ Ready for deployment to main/master branch"
