name: CI/CD Pipeline for Tour Management App

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE_NAME: tour-management-app

jobs:
  # Job 1: Test and Validate Code
  test:
    name: Test and Build Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate project structure
      run: |
        echo "🔍 Checking project structure..."
        
        # Find and display project files
        echo "Found project files:"
        find . -name "*.csproj" -o -name "*.sln" | head -10
        
        # Check for ASPX files
        aspx_count=$(find . -name "*.aspx" | wc -l)
        if [ "$aspx_count" -gt 0 ]; then
          echo "✅ Found $aspx_count ASPX pages"
        else
          echo "❌ No ASPX files found"
          exit 1
        fi
        
        # Check for C# files
        cs_count=$(find . -name "*.cs" | wc -l)
        echo "📄 Found $cs_count C# files"
        
    - name: Check Web.config
      run: |
        echo "🔧 Validating Web.config..."
        web_config=$(find . -name "Web.config" | head -1)
        if [ -n "$web_config" ] && [ -f "$web_config" ]; then
          echo "✅ Web.config found: $web_config"
        else
          echo "⚠️ Web.config not found"
        fi
        
    - name: Static code analysis
      run: |
        echo "🔎 Running static analysis..."
        
        # Check for TODO/FIXME comments
        todo_count=$(find . -name "*.cs" -o -name "*.aspx" | xargs grep -l "TODO\|FIXME\|HACK" | wc -l || echo "0")
        echo "📝 Found $todo_count files with TODO/FIXME comments"
        
        # Basic security checks
        if find . -name "*.cs" | xargs grep -l "Request\[" >/dev/null 2>&1; then
          echo "⚠️ Found potential XSS vulnerabilities - review Request[] usage"
        else
          echo "✅ No obvious XSS issues detected"
        fi
        
        echo "✅ Static analysis completed"

  # Job 2: Docker Build and Test  
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2019
        WORKDIR /inetpub/wwwroot
        COPY . .
        EXPOSE 80
        EOF
        echo "✅ Dockerfile created"
        
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        echo "🧪 Testing Docker image..."
        docker images ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        echo "✅ Docker image built successfully"

  # Job 3: Deploy to Docker Hub
  deploy:
    name: Deploy to Docker Hub  
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2019
        WORKDIR /inetpub/wwwroot
        COPY . .
        EXPOSE 80
        EOF
        
    - name: Build and Push to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deployment Success
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "📦 Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "🔗 Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"

  # Job 4: Notify Results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, docker-build, deploy]
    if: always()
    
    steps:
    - name: Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 CI/CD Pipeline SUCCESS!"
        echo "✅ All tests passed"
        echo "✅ Docker image built" 
        echo "✅ Deployed to Docker Hub"
        echo ""
        echo "Your app is ready! 🚀"
        echo "Docker Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        
    - name: Failure Notification  
      if: needs.test.result == 'failure' || needs.docker-build.result == 'failure' || needs.deploy.result == 'failure'
      run: |
        echo "❌ CI/CD Pipeline FAILED!"
        echo "Test Status: ${{ needs.test.result }}"
        echo "Docker Build Status: ${{ needs.docker-build.result }}"  
        echo "Deploy Status: ${{ needs.deploy.result }}"
        echo ""
        echo "Please check the logs above for details."
