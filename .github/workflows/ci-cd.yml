name: CI/CD Pipeline for Tour Management App

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE_NAME: tour-management-app
  DOCKER_TAG: latest

jobs:
  # Job 1: Code Quality and Build Test
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up .NET Framework
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '4.7.2'
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore NuGet packages
      run: |
        cd DotNetFrameworkProject_CE040_CE087/Tour_Management
        nuget restore packages.config -PackagesDirectory packages
        
    - name: Build the project
      run: |
        cd DotNetFrameworkProject_CE040_CE087/Tour_Management
        msbuild Tour_Management.csproj /p:Configuration=Release /p:Platform="Any CPU"
        
    - name: Run static analysis
      run: |
        echo "Running static code analysis..."
        # Check for common issues in ASPX files
        find DotNetFrameworkProject_CE040_CE087/Tour_Management -name "*.aspx" -exec grep -l "TODO\|FIXME\|HACK" {} \; || true
        echo "Static analysis completed"
        
    - name: Validate Web.config
      run: |
        echo "Validating Web.config..."
        if [ -f "DotNetFrameworkProject_CE040_CE087/Tour_Management/Web.config" ]; then
          echo "‚úÖ Web.config found"
          # Check for required connection strings
          if grep -q "connectionStrings" DotNetFrameworkProject_CE040_CE087/Tour_Management/Web.config; then
            echo "‚úÖ Connection strings found"
          else
            echo "‚ùå No connection strings found"
            exit 1
          fi
        else
          echo "‚ùå Web.config not found"
          exit 1
        fi
        
    - name: Check for required files
      run: |
        echo "Checking for required application files..."
        required_files=(
          "DotNetFrameworkProject_CE040_CE087/Tour_Management/DisplayTours.aspx"
          "DotNetFrameworkProject_CE040_CE087/Tour_Management/userlogin.aspx"
          "DotNetFrameworkProject_CE040_CE087/Tour_Management/AdminLogin2.aspx"
          "DotNetFrameworkProject_CE040_CE087/Tour_Management/SignUpForm.aspx"
          "DotNetFrameworkProject_CE040_CE087/Tour_Management/Web.config"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        echo "‚úÖ All required files present"

  # Job 2: Docker Build and Test
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        docker run --rm -d --name test-container -p 8081:80 ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test if the application is responding
        if curl -f http://localhost:8081 > /dev/null 2>&1; then
          echo "‚úÖ Application is responding"
        else
          echo "‚ùå Application is not responding"
          docker logs test-container
          exit 1
        fi
        
        # Clean up test container
        docker stop test-container
        
    - name: Save Docker image
      run: |
        docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} | gzip > ${{ env.DOCKER_IMAGE_NAME }}.tar.gz
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: ${{ env.DOCKER_IMAGE_NAME }}.tar.gz

  # Job 3: Deploy to Docker Hub (only on main/master branch)
  deploy:
    name: Deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Update deployment status
      run: |
        echo "üöÄ Deployment successful!"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Docker Hub URL: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"

  # Job 4: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, docker-build, deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Your Tour Management application has been deployed to Docker Hub"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the logs for more details"
